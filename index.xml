<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ken Blog</title>
    <link>http://www.hello-api.cn/</link>
    <description>Recent content on Ken Blog</description>
    <image>
      <url>http://www.hello-api.cn/papermod-cover.png</url>
      <link>http://www.hello-api.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 22 Oct 2022 15:58:00 +0800</lastBuildDate><atom:link href="http://www.hello-api.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation | Update</title>
      <link>http://www.hello-api.cn/posts/papermod/papermod-installation/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/papermod/papermod-installation/</guid>
      <description>Read Install and Update instructions here</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>http://www.hello-api.cn/posts/papermod/papermod-features/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/papermod/papermod-features/</guid>
      <description>Learn About All Features in PaperMod</description>
    </item>
    
    <item>
      <title>SmsGateway-短信网关平台</title>
      <link>http://www.hello-api.cn/life/smsgateway/</link>
      <pubDate>Sat, 22 Oct 2022 15:58:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/life/smsgateway/</guid>
      <description>SmsGateway-短信网关平台,统一的返回值格式，方便排查和记录</description>
    </item>
    
    <item>
      <title>go-平常使用中的一些小技巧</title>
      <link>http://www.hello-api.cn/study/go-skill/</link>
      <pubDate>Wed, 28 Sep 2022 11:34:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-skill/</guid>
      <description>######打乱数组中的顺序
data := make([]uint, 10) rand.Seed(time.Now().Unix()) length := len(data) for i := 0; i &amp;lt; length; i++ { data[rand.Intn(length)] ,data[i] = data[i],data[rand.Intn(length)] } </description>
    </item>
    
    <item>
      <title>go-Gin中间件</title>
      <link>http://www.hello-api.cn/study/go-gin-middleware/</link>
      <pubDate>Wed, 14 Sep 2022 13:47:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-gin-middleware/</guid>
      <description>func LoginMiddleware(ctx *gin.Context) { var UserId uint UserId = 2 //example fmt.Printf(&amp;#34;LoginMiddleware UserId: %v\n&amp;#34;, UserId) ctx.Set(&amp;#34;UserId&amp;#34;, UserId) ctx.Next() } 在入口函数上添加中间件
group := r.Group(&amp;#34;/api/group&amp;#34;).Use(LoginMiddleware) { group.POST(&amp;#34;/create&amp;#34;, GroupController{}.Create) } </description>
    </item>
    
    <item>
      <title>go-gin连接gorm</title>
      <link>http://www.hello-api.cn/study/go-gin-002/</link>
      <pubDate>Fri, 02 Sep 2022 17:30:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-gin-002/</guid>
      <description>本次记录如何在gin中简单的使用和封装gorm
创建database.go,用于定义gorm连接数据库的配置和DB的统一引用 database.go
package common import ( &amp;#34;fmt&amp;#34; &amp;#34;note.hello-api.cn/model&amp;#34; &amp;#34;gorm.io/driver/mysql&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; ) var DB *gorm.DB func InitDB() *gorm.DB { host := &amp;#34;localhost&amp;#34; port := &amp;#34;3306&amp;#34; username := &amp;#34;gin&amp;#34; database := &amp;#34;gin&amp;#34; password := &amp;#34;gingin&amp;#34; charset := &amp;#34;utf8mb4&amp;#34; arg := fmt.Sprintf(&amp;#34;%s:%s@tcp(%s:%s)/%s?charset=%s&amp;amp;parseTime=true&amp;#34;, username, password, host, port, database, charset) db, err := gorm.Open(mysql.Open(arg)) if err != nil { panic(err.Error()) } db.AutoMigrate(&amp;amp;model.User{}) db.AutoMigrate(&amp;amp;model.Note{}) DB = db return db } func GetDB() *gorm.DB { return DB } 在gin的入口main.</description>
    </item>
    
    <item>
      <title>go-Mysql入门操作</title>
      <link>http://www.hello-api.cn/study/go-mysql/</link>
      <pubDate>Fri, 02 Sep 2022 17:21:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-mysql/</guid>
      <description>选用扩展 gorm.io
Install go get -u gorm.io/gorm go get -u gorm.io/driver/sqlite
Test models.go package models import ( &amp;#34;fmt&amp;#34; &amp;#34;gorm.io/driver/mysql&amp;#34; &amp;#34;gorm.io/gorm&amp;#34; &amp;#34;gorm.io/gorm/schema&amp;#34; ) var ( dsn string = &amp;#34;gin:gingin@tcp(127.0.0.1:3306)/gin?charset=utf8mb4&amp;#34; // 数据库配置 root账号 0000密码 shop数据库 utf8mb4编码 ) //实现orm func DB() *gorm.DB { // 连接mysql数据库， gorm.Config有很多配置 例如前缀 后准 等等 db, err := gorm.Open(mysql.Open(dsn), &amp;amp;gorm.Config{ NamingStrategy: schema.NamingStrategy{ TablePrefix: &amp;#34;tp_&amp;#34;, SingularTable: true, }, }) // 数据库连接出错 退出 if err != nil { fmt.Println(&amp;#34;数据库连接失败&amp;#34;, err) panic(1) } // 返回数据库实例 db.</description>
    </item>
    
    <item>
      <title>go-第一个Gin程序</title>
      <link>http://www.hello-api.cn/study/go-gin-001/</link>
      <pubDate>Thu, 01 Sep 2022 14:46:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-gin-001/</guid>
      <description>第一个Gin程序 安装环境 go 下载对应系统的安装包 安装完毕后敲出
go version
显示 go version go1.18.3 windows/amd64 表示安装成功了
vscode 安装软件后还需安装go扩展
vscode打开项目所在的文件夹目录
go mod init demo go get -u -v github.com/gin-gonic/gin
创建文件 main.go package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/&amp;#34;, func(c *gin.Context) { c.String(200, &amp;#34;Hello World&amp;#34;) }) r.Run() // listen and serve on 0.0.0.0:8080 } 页面访问 http://localhost:8080/ 打印 Hello World ,表示gin框架也安装成功了</description>
    </item>
    
    <item>
      <title>go-了解数组和切片的基础用法</title>
      <link>http://www.hello-api.cn/study/go-002/</link>
      <pubDate>Thu, 01 Sep 2022 09:54:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-002/</guid>
      <description>var splice1 []int fmt.Printf(&amp;#34;splice1: len:%d,cap:%d,%T&amp;#34;, len(splice1), cap(splice1), splice1) 结果
splice1: len:1,cap:1,[]int var splice1 []int = make([]int, 1, 3) fmt.Printf(&amp;#34;splice1: len:%d,cap:%d,%T\n&amp;#34;, len(splice1), cap(splice1), splice1) splice1 = append(splice1, 1) splice1 = append(splice1, 1) splice1 = append(splice1, 1) splice1 = append(splice1, 1) // 超出当前数组的长度后,会以cap=3的进行对数组扩容 fmt.Printf(&amp;#34;splice1: len:%d,cap:%d,%T\n&amp;#34;, len(splice1), cap(splice1), splice1) 结果
splice1: len:1,cap:3,[]int splice1: len:5,cap:6,[]int splice2 := []int{1, 2, 3,4} fmt.Printf(&amp;#34;splice2: len:%d,cap:%d,%T\n&amp;#34;, len(splice2), cap(splice2), splice2) splice2 = append(splice2, 1) fmt.Printf(&amp;#34;splice2: len:%d,cap:%d,%T\n&amp;#34;, len(splice2), cap(splice2), splice2) 当没有设置cap后,append后的容量会以初始的数组len来进行新的扩容 结果</description>
    </item>
    
    <item>
      <title>go-了解Printf输出的用法</title>
      <link>http://www.hello-api.cn/study/go-001/</link>
      <pubDate>Thu, 01 Sep 2022 09:18:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/go-001/</guid>
      <description>var splice1 []int //打印切片长度和切片类型 fmt.Printf(&amp;#34;splice1: len:%d,%T&amp;#34;, len(splice1), splice1) 结果
splice1: len:1,[]int fmt.Printf 一般可支持的输出流为:
%v 以默认的方式打印变量的值
%+v 带字段名称
%T 打印变量的类型
%+d 带符号的整型
%d 整型
%5d 表示该整型最大长度是5
%05d 会在数字前面补零
%s 正常输出字符串
%t 打印true或false
%b 打印整型的二进制</description>
    </item>
    
    <item>
      <title>tronlink-归集系统</title>
      <link>http://www.hello-api.cn/tech/tronlink-002/</link>
      <pubDate>Sat, 20 Aug 2022 10:32:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/tronlink-002/</guid>
      <description>前言 首先要了解下tronlink的交易机制,进行trc20如usdt和usdc转账的时候,如果没有冻结能量将会损耗一定的trx,该系统的目的就是减少这部分损耗的trx
相关笔记 tronlink-扫块系统,有需要的可先前往了解
目标 搭建冻结能量系统,例如你有10000trx后,在自己的交易系统里可以根据需求为自己的子钱包进行冻结能量,减少trx的支出
前置条件 python
正式内容 下面会细分说明下每个def的方法用途,以及总的冻结流程如何处理
获取当次可冻结的钱包数 每完成一次流程,需要执行(解冻-&amp;gt;质押)*n-&amp;gt;投票,计算大概需要的能量判断该次可操作多少个,基础操作目前发现大约300带宽一次
def get_max_unfreeze_count(tronapi): once = 300 getaccountnet = tronapi.getaccountresource() freeNetUsed = getaccountnet[&amp;#39;freeNetUsed&amp;#39;] if &amp;#39;freeNetUsed&amp;#39; in getaccountnet else 0 freeNetLimit = getaccountnet[&amp;#39;freeNetLimit&amp;#39;] if &amp;#39;freeNetLimit&amp;#39; in getaccountnet else 0 NetUsed = getaccountnet[&amp;#39;NetUsed&amp;#39;] if &amp;#39;NetUsed&amp;#39; in getaccountnet else 0 NetLimit = getaccountnet[&amp;#39;NetLimit&amp;#39;] if &amp;#39;NetLimit&amp;#39; in getaccountnet else 0 bandwidth = NetLimit + freeNetLimit - NetUsed - freeNetUsed # 质押-&amp;gt;投票 固定操作两次 counts=math.floor((bandwidth-once) / (2 * once)) print(&amp;#34;[%s]:当前带宽:%s 可操作:%s个地址&amp;#34; % (datetime.</description>
    </item>
    
    <item>
      <title>dapp</title>
      <link>http://www.hello-api.cn/study/dapp/</link>
      <pubDate>Fri, 19 Aug 2022 15:41:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/dapp/</guid>
      <description>合约在线开发IDE
solidity 中文文档
trongrid.io
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1&amp;#34;&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;dapp&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;vue&amp;#34;&amp;gt; 目标地址:&amp;lt;input v-model=&amp;#34;to_address&amp;#34; style=&amp;#34;width: 100%&amp;#34;&amp;gt; 订单编号:&amp;lt;input v-model=&amp;#34;transaction&amp;#34; style=&amp;#34;width: 100%&amp;#34;&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;button @click=&amp;#34;init_tronWeb&amp;#34;&amp;gt; 登录tronlink &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;transferTrx&amp;#34;&amp;gt; transferTrx &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;getBalance&amp;#34;&amp;gt; 获取trx余额 &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;getUSDTBalance&amp;#34;&amp;gt; 获取usdt余额 &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;transferUSDT&amp;#34;&amp;gt; 转账0.001usdt &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;transferUSDTRemark&amp;#34;&amp;gt; 带备注的转账0.001usdt &amp;lt;/button&amp;gt; &amp;lt;button @click=&amp;#34;getTransaction&amp;#34;&amp;gt; 获取交易详情 &amp;lt;/button&amp;gt; &amp;lt;p v-show=&amp;#34;result.length&amp;#34; v-html=&amp;#34;result.join(&amp;#39;&amp;lt;br/&amp;gt;&amp;#39;)&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;./js/tronweb.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;./js/trongrid.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;./js/vue.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;.</description>
    </item>
    
    <item>
      <title>php-如何使用powerdns的接口</title>
      <link>http://www.hello-api.cn/study/php-powerdns/</link>
      <pubDate>Fri, 19 Aug 2022 15:39:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-powerdns/</guid>
      <description>powerdns安装教程
如何使用powerdns的http-api ? 文档需知 powerdns文档 Swagger接入开发 powerdns的yaml配置文件 | swagger官网
Swagger 生成插件
Sign in 登录 (没有账号的免费注册一个)
Create New -&amp;gt; Create New API
创建完毕将powerdns的yaml配置文件粘贴到代码框中
右上角 -&amp;gt; Export -&amp;gt; Client SDK -&amp;gt; 指定的开发语言,像我就用PHP github创建一个新的 repository , 将导出来的文件上传上去 修改composer.json
{ &amp;#34;repositories&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;git&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;https://github.com/suguer/powerdns.git&amp;#34; } ], &amp;#34;require&amp;#34;: { &amp;#34;suguer/powerdns&amp;#34;: &amp;#34;*@dev&amp;#34; } } 开始使用 DnsPowerDnsClient.php
use Swagger\Client\Api\ZonesApi; use Swagger\Client\ApiException; use Swagger\Client\Model\RRSet; use Swagger\Client\Model\Zone; use Swagger\Client\Configuration; class DnsPowerDnsClient { private $server_id = &amp;#34;localhost&amp;#34;; /** * @var \GuzzleHttp\Client */ private $client; /** * @var ZonesApi */ private $zoneApi; private $currentNsList = [&amp;#39;ns1&amp;#39;,&amp;#39;ns2&amp;#39;]; public function __construct() { $config=[ &amp;#34;ip&amp;#34; =&amp;gt; &amp;#34;&amp;#34;, &amp;#34;api_key&amp;#34; =&amp;gt; &amp;#34;&amp;#34;, ]; $this-&amp;gt;client = new \GuzzleHttp\Client([ &amp;#39;timeout&amp;#39; =&amp;gt; 40.</description>
    </item>
    
    <item>
      <title>php-MultiProcess多进程</title>
      <link>http://www.hello-api.cn/code/php-multiprocess/</link>
      <pubDate>Fri, 19 Aug 2022 15:38:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/code/php-multiprocess/</guid>
      <description>trait MultiProcessTrait { protected $processes = []; protected $maxFork = 14; /** * @param $action \Closure * @param array $params */ public function fork($action, $params = []) { $this-&amp;gt;processes[] = [ &amp;#34;action&amp;#34; =&amp;gt; $action, &amp;#34;params&amp;#34; =&amp;gt; $params ]; } protected $runningProcess = []; public function waitProcessRun() { while (count($this-&amp;gt;runningProcess) &amp;gt; 0) { $mypid = pcntl_waitpid(-1, $status, WNOHANG); foreach ($this-&amp;gt;runningProcess as $key =&amp;gt; $pid) { if ($mypid == $pid || $mypid == -1) { echo &amp;#34;child $key completed\n&amp;#34;; unset($this-&amp;gt;runningProcess[$key]); //判断是否还有未fork进程 $this-&amp;gt;runOne(); } } } } public function runOne() { $process = array_shift($this-&amp;gt;processes); if ($process) { $pid = pcntl_fork(); if ($pid == -1) { die(&amp;#34;could not fork&amp;#34;); } elseif ($pid) { $this-&amp;gt;runningProcess[$pid] = $pid; echo &amp;#34;create child: $pid \n&amp;#34;; } else { //执行子进程 call_user_func_array($process[&amp;#39;action&amp;#39;], $process[&amp;#39;params&amp;#39;]); exit;// 一定要注意退出子进程,否则pcntl_fork() 会被子进程再fork,带来处理上的影响。 } } } public function runProcess() { if (empty($this-&amp;gt;processes)) { return; } for ($i = 0; $i &amp;lt; $this-&amp;gt;maxFork; $i++) { $this-&amp;gt;runOne(); } $this-&amp;gt;waitProcessRun(); } } </description>
    </item>
    
    <item>
      <title>php-laravel自定义https端口访问异常</title>
      <link>http://www.hello-api.cn/study/php-laravel-003/</link>
      <pubDate>Fri, 19 Aug 2022 15:35:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-laravel-003/</guid>
      <description>最近项目上需要吧后台的链接升级,开启https并且设置到8443端口,在laravel的翻页以及跳转的页面上,会把端口号给隐藏了, 原因在于laravel/vendor/symfony/http-foundation/Request.php public function getPort() { if ($this-&amp;gt;isFromTrustedProxy()) { if (self::$trustedHeaders[self::HEADER_CLIENT_PORT] &amp;amp;&amp;amp; $port = $this-&amp;gt;headers-&amp;gt;get(self::$trustedHeaders[self::HEADER_CLIENT_PORT])) { return $port; } if (self::$trustedHeaders[self::HEADER_CLIENT_PROTO] &amp;amp;&amp;amp; &amp;#39;https&amp;#39; === $this-&amp;gt;headers-&amp;gt;get(self::$trustedHeaders[self::HEADER_CLIENT_PROTO], &amp;#39;http&amp;#39;)) { return 443; } } if ($host = $this-&amp;gt;headers-&amp;gt;get(&amp;#39;HOST&amp;#39;)) { if ($host[0] === &amp;#39;[&amp;#39;) { $pos = strpos($host, &amp;#39;:&amp;#39;, strrpos($host, &amp;#39;]&amp;#39;)); } else { $pos = strrpos($host, &amp;#39;:&amp;#39;); } if (false !== $pos) { return (int) substr($host, $pos + 1); } return &amp;#39;https&amp;#39; === $this-&amp;gt;getScheme() ?</description>
    </item>
    
    <item>
      <title>php-自定义统一的api入口路由</title>
      <link>http://www.hello-api.cn/code/php-apiroute/</link>
      <pubDate>Fri, 19 Aug 2022 15:34:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/code/php-apiroute/</guid>
      <description>route.php
Route::group([&amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;fapi/&amp;#39;, &amp;#39;middleware&amp;#39; =&amp;gt; [&amp;#39;web&amp;#39;]], function () { Route::any(&amp;#39;{slug}&amp;#39;, &amp;#39;Cloud\Rent\Classes\Api\ApiRouter@route&amp;#39;)-&amp;gt;where(&amp;#39;slug&amp;#39;, &amp;#39;(.*)?&amp;#39;); }); ApiRouter.php
&amp;lt;?php namespace Cloud\Rent\Classes\Api; use App; use Illuminate\Routing\Controller as ControllerBase; use October\Rain\Router\Helper as RouterHelper; use Illuminate\Support\Str; /** * Class ApiRouter * API例子：在Now\Youpin\Api下建类Auth，里面有public function hello()，可以通过http://host/api/auth/hello * @package Now\Youpin\Classes\Api */ class ApiRouter extends ControllerBase { public function __construct() { header(&amp;#39;Access-Control-Allow-Origin: *&amp;#39;); header(&amp;#39;Access-Control-Allow-Methods:*&amp;#39;); header(&amp;#39;Access-Control-Allow-Headers:*&amp;#39;); header(&amp;#34;Access-Control-Allow-Headers:DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type, Accept-Language, Origin, Accept-Encoding&amp;#34;); } /** * @var string Allows early access to page action. */ public static $action; /** * @var array Allows early access to page parameters.</description>
    </item>
    
    <item>
      <title>keycloak</title>
      <link>http://www.hello-api.cn/study/keycloak/</link>
      <pubDate>Fri, 19 Aug 2022 15:32:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/keycloak/</guid>
      <description>Keycloak
1. create realm 用于对接不同网站的登录用户,隔离区域
2. how to use php
composer require stevenmaguire/oauth2-keycloak SsoKeycloakClient.php
class SsoKeycloakClient implements SsoClientInterface { use ApiConfigTrait; use ApiLoggerTrait; const API_NAME = &amp;#34;keycloak&amp;#34;; private $server_access_token_path = &amp;#34;/data/keycloak_server_access_token.log&amp;#34;; /** * @var Keycloak */ protected $provider; /** * @var GuzzleHttp\Client */ private $client; public function __construct() { $this-&amp;gt;initLogger(-3, 2); $this-&amp;gt;loadApiConfig(self::API_NAME); try { $redirectUri = ShareSession::get(&amp;#39;redirect_uri&amp;#39;) ? ShareSession::get(&amp;#39;redirect_uri&amp;#39;) : $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;redirect_uri&amp;#39;]; } catch (\Throwable $e) { $redirectUri = $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;redirect_uri&amp;#39;]; } $redirectUri = $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;redirect_uri&amp;#39;]; $this-&amp;gt;provider = new Keycloak([ &amp;#39;authServerUrl&amp;#39; =&amp;gt; $this-&amp;gt;apiConfig-&amp;gt;Host, &amp;#39;realm&amp;#39; =&amp;gt; $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;realm&amp;#39;], &amp;#39;clientId&amp;#39; =&amp;gt; $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;login_client_id&amp;#39;], &amp;#39;clientSecret&amp;#39; =&amp;gt; $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;login_client_secret&amp;#39;], &amp;#39;redirectUri&amp;#39; =&amp;gt; $redirectUri, ]); $this-&amp;gt;client = new GuzzleHttp\Client([ &amp;#39;timeout&amp;#39; =&amp;gt; 30.</description>
    </item>
    
    <item>
      <title>Mongodb数据库-python有关的操作</title>
      <link>http://www.hello-api.cn/study/mongodb-004/</link>
      <pubDate>Fri, 19 Aug 2022 15:30:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mongodb-004/</guid>
      <description>flask
flask-pymongo
flask-mongoengine
数据内容
[{ &amp;#34;_id&amp;#34;: { &amp;#34;$oid&amp;#34;: &amp;#34;62e3525f18909374eb4de53f&amp;#34; }, &amp;#34;plat&amp;#34;: { &amp;#34;wechat&amp;#34;: &amp;#34;bc61736d-7ed0-47bb-ba1b-33474fecde23&amp;#34;, &amp;#34;alipay&amp;#34;: &amp;#34;random&amp;#34; }, &amp;#34;created_at&amp;#34;: { &amp;#34;$date&amp;#34;: { &amp;#34;$numberLong&amp;#34;: &amp;#34;1659093727910&amp;#34; } }, &amp;#34;updated_at&amp;#34;: { &amp;#34;$date&amp;#34;: { &amp;#34;$numberLong&amp;#34;: &amp;#34;1659093727910&amp;#34; } }, &amp;#34;nickname&amp;#34;: &amp;#34;su&amp;#34; }] 根据 plat.wechat中来搜索用户
pymongo语法:
mongo.db.user.find_one(filter={&amp;#34;plat.wechat&amp;#34;:openid}) mongoengine语法:
User.objects(plat__wechat=openid).first() </description>
    </item>
    
    <item>
      <title>从0到1 记录搭建Hugo个人博客-04 增加评论功能</title>
      <link>http://www.hello-api.cn/tech/hugo-004/</link>
      <pubDate>Thu, 18 Aug 2022 12:18:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/hugo-004/</guid>
      <description>前言 搭建个人博客或者其他网站站点的时候,只有静态页面显得比较冷清,想了解自己的文章能不能帮到更多有相同疑惑的人,或者为自己的网站增添功能
目标 扩展自己的网站支持评论功能
前置条件 有github的账号
正式内容 感谢提供这个评论功能的giscus,在不用维护评论功能以及数据库的情况下,这是款十分便利的评论系统
创建github仓库 首先需要创建一个github的仓库,用于保存评论的留言,并且需要一些小小的配置,参考官网
选择 giscus 连接到的仓库。请确保：
此仓库是公开的，否则访客将无法查看 discussion。 giscus app 已安装否则访客将无法评论和回应。 指导入口 Discussions功能已在你的仓库中启用。指导 选择配置 创建完仓库后,在giscus的配置栏中选择自己需要的配置 如本文的配置为
&amp;lt;script src=&amp;#34;https://giscus.app/client.js&amp;#34; data-repo=&amp;#34;suguer/giscus.github.io&amp;#34; data-repo-id=&amp;#34;R_kgDOH08FpA&amp;#34; data-category=&amp;#34;Announcements&amp;#34; data-category-id=&amp;#34;DIC_kwDOH08FpM4CQ2jj&amp;#34; data-mapping=&amp;#34;title&amp;#34; data-strict=&amp;#34;0&amp;#34; data-reactions-enabled=&amp;#34;1&amp;#34; data-emit-metadata=&amp;#34;0&amp;#34; data-input-position=&amp;#34;top&amp;#34; data-theme=&amp;#34;preferred_color_scheme&amp;#34; data-lang=&amp;#34;zh-CN&amp;#34; data-loading=&amp;#34;lazy&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; 嵌入js代码 hugo的详情文章路径一般在主题下的layouts/_default/single.html，建议不要在主题下theme直接修改文件，避免后续升级覆盖没了，可在根目录下相同创建出layouts/_default/single.html，接着在代码最后粘贴giscus的那段js代码即可</description>
    </item>
    
    <item>
      <title>powerdns-学习如何搭建个人专属DNS服务器</title>
      <link>http://www.hello-api.cn/study/powerdns/</link>
      <pubDate>Wed, 17 Aug 2022 17:46:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/powerdns/</guid>
      <description>powerdns | powerdns_http_api | download link
1、 环境 environment 系统 centos 7.9
2、 安装 install powerdns yum install epel-release yum-plugin-priorities curl -o /etc/yum.repos.d/powerdns-auth-45.repo https://repo.powerdns.com/repo-files/centos-auth-45.repo
yum install pdns
3、 安装 install pdns-recursor yum -y install epel-release yum-plugin-priorities curl -o /etc/yum.repos.d/powerdns-rec-45.repo https://repo.powerdns.com/repo-files/centos-rec-45.repo yum -y install pdns-recursor
4、 配置 configure 修改mysql配置文件
[mysqld] /etc/my.cnf
innodb_file_per_table = 1 innodb_flush_log_at_trx_commit = 0 character-set-server=utf8 collation-server=utf8_general_ci create database poweradmin; grant all on poweradmin.* to puser1@localhost identified by &amp;#34;wisdom123@&amp;#34;; flush privileges; mysql -u root poweradmin &amp;lt; /usr/share/doc/pdns-backend-mysql-4.</description>
    </item>
    
    <item>
      <title>Gitblit-如何实现自动编译发布</title>
      <link>http://www.hello-api.cn/tech/gitblit/</link>
      <pubDate>Tue, 16 Aug 2022 15:50:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/gitblit/</guid>
      <description>前言 在外网正式环境中如果配置不足,编译前端项目可能导致服务器的卡死甚至死机,因此可采取内网服务器上编译再自动发布
目标 内网编译前端项目,分发到另一个git项目并自动提交发布
前置条件 gitblit
正式内容 1. 创建 append-auto-compile.groovy import com.gitblit.GitBlit import com.gitblit.Keys import com.gitblit.models.RepositoryModel import com.gitblit.models.TeamModel import com.gitblit.models.UserModel import com.gitblit.utils.JGitUtils import com.gitblit.utils.StringUtils import java.text.SimpleDateFormat import org.eclipse.jgit.api.CloneCommand import org.eclipse.jgit.api.PullCommand import org.eclipse.jgit.api.Git import org.eclipse.jgit.lib.Repository import org.eclipse.jgit.lib.Config import org.eclipse.jgit.revwalk.RevCommit import org.eclipse.jgit.transport.ReceiveCommand import org.eclipse.jgit.transport.ReceiveCommand.Result import org.eclipse.jgit.util.FileUtils import org.slf4j.Logger logger.info(&amp;#34;append-auto-compile hook triggered by ${user.username} for ${repository.name} l&amp;#34;) def rootFolder = &amp;#39;/home/git/&amp;#39; def bare = false def cloneAllBranches = true def cloneBranch = &amp;#39;refs/heads/master&amp;#39; def includeSubmodules = true def repoName = repository.</description>
    </item>
    
    <item>
      <title>Github-</title>
      <link>http://www.hello-api.cn/tech/github-001/</link>
      <pubDate>Tue, 16 Aug 2022 15:35:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/github-001/</guid>
      <description>前言 目前github已经不允许使用账号密码上传代码,因此记录如何通过设置ssh来上传
目标 前置条件 能运行ssh-keygen
正式内容 ssh-keygen -t rsa -C &amp;ldquo;email&amp;rdquo;
在 C:\Users\用户.ssh下
|- id_rsa (上传的时候携带该数据)
|- id_rsa.pub (可在项目或者个人中心设置中添加该数据)
如果想要免密码上传代码
可输入 http://账号:密码@url.gt</description>
    </item>
    
    <item>
      <title>python-自定义线程池</title>
      <link>http://www.hello-api.cn/code/python-threadpool/</link>
      <pubDate>Tue, 16 Aug 2022 15:07:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/code/python-threadpool/</guid>
      <description>自定义的一个小功能,线程池处理,用法很简单
def handleThread(a,b): pass main = ThreadPool(5) req = WorkRequest(handleThread, args=[1, 2], kwds={}) main.putRequest(req) #-*-encoding:utf-8-*- &amp;#39;&amp;#39;&amp;#39; Created on 2012-3-9 @summary: 线程池 &amp;#39;&amp;#39;&amp;#39; import sys import threading import queue import traceback import statistics # 定义一些Exception，用于自定义异常处理 class NoResultsPending(Exception): &amp;#34;&amp;#34;&amp;#34;All works requests have been processed&amp;#34;&amp;#34;&amp;#34; pass class NoWorkersAvailable(Exception): &amp;#34;&amp;#34;&amp;#34;No worket threads available to process remaining requests.&amp;#34;&amp;#34;&amp;#34; pass def _handle_thread_exception(request, exc_info): &amp;#34;&amp;#34;&amp;#34;默认的异常处理函数，只是简单的打印&amp;#34;&amp;#34;&amp;#34; traceback.print_exception(*exc_info) #classes class WorkerThread(threading.Thread): &amp;#34;&amp;#34;&amp;#34;后台线程，真正的工作线程，从请求队列(requestQueue)中获取work， 并将执行后的结果添加到结果队列(resultQueue)&amp;#34;&amp;#34;&amp;#34; def __init__(self,requestQueue,resultQueue,poll_timeout=5,**kwds): threading.Thread.__init__(self,**kwds) &amp;#39;&amp;#39;&amp;#39;设置为守护进行&amp;#39;&amp;#39;&amp;#39; self.setDaemon(True) self._requestQueue = requestQueue self.</description>
    </item>
    
    <item>
      <title>tronlink-扫块系统</title>
      <link>http://www.hello-api.cn/tech/tronlink-001/</link>
      <pubDate>Tue, 16 Aug 2022 10:15:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/tronlink-001/</guid>
      <description>前言 对于某些网站平台如果想支持收取波场区块链,但是又不清楚完整的流程应该如何部署的话,这里可以提供一套较为完整的方案,实现如商城下支持对客户的在线支付,
目标 实现客户在线支付,收取波场链的usdt或usdc,并且自动支付和激活订单,最后能归集到一个账户上自由使用
前置条件 在波场链有足够的trx,数量的多少取决于你对于归集的效率的需求,如果需要归集的周期越短,效率越快,则需要的trx越多
1个总钱包,其中会扩展的功能有,分发冻结能量,收款,激活钱包,也可以看业务需要拆开成3个钱包
开发环境: python mysql
正式内容 所有的接口以及交互均来自 波场链官网文档 ,如果对于文档不太熟的同学请先阅读了解下波场链的交易流程
主要数据结构 节点数据 block_chain_block
数据类型 类型 描述 id bigint 区块节点 total int 总交易数 active int 已激活交易数 created_at timestamp 创建时间 updated_at timestamp 更新时间 started_at timestamp 开始执行时间 ended_at timestamp 结束执行时间 block_at timestamp 节点时间 error timestamp 节点错误信息 钱包数据 block_chain_wallet
数据类型 类型 描述 id int 自增id address varchar(255) 地址 private_key varchar(1024) 地址密钥(建议保存到数据库时加密) user_id int 客户用户ID created_at timestamp 创建时间 updated_at timestamp 更新时间 deposit decimal(30,6) 余额 status varchar(16) 状态 扫块系统 想要获取到链上所有的交易信息,主要有两种方式,第一自建超级节点服务器,这样就可以频繁获取数据而不受限制,但是对于一般的网站平台来说,搭建一台波场链节点服务器浪费了资金,因此这里采用第二种方式,通过官网提供的接口进行查询同步,需注意本文涉及用到的接口均是固块化API</description>
    </item>
    
    <item>
      <title>wechaty-描述各方法的类型</title>
      <link>http://www.hello-api.cn/study/wechaty-002/</link>
      <pubDate>Mon, 15 Aug 2022 11:31:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/wechaty-002/</guid>
      <description>Message 简单来说就是消息,在微信中聊天的文字,转账,语音等等都是消息的一种,因此是最重要的一项 官网
# 消息类型 class MessageType(betterproto.Enum): MESSAGE_TYPE_UNSPECIFIED = 0 MESSAGE_TYPE_ATTACHMENT = 1 MESSAGE_TYPE_AUDIO = 2 MESSAGE_TYPE_CONTACT = 3 MESSAGE_TYPE_EMOTICON = 4 MESSAGE_TYPE_IMAGE = 5 图像 MESSAGE_TYPE_TEXT = 6 文字 MESSAGE_TYPE_VIDEO = 7 MESSAGE_TYPE_CHAT_HISTORY = 8 MESSAGE_TYPE_LOCATION = 9 MESSAGE_TYPE_MINI_PROGRAM = 10 MESSAGE_TYPE_TRANSFER = 11 MESSAGE_TYPE_RED_ENVELOPE = 12 MESSAGE_TYPE_RECALLED = 13 MESSAGE_TYPE_URL = 14 常用说明:
type 消息类型,具体类型参考上述 print(msg.type()) text 接受的文本信息 print(msg.text()) say 回复信息,不仅文本消息,图片等都可以发送 await msg.say(msg.text()) 发送图片
from wechaty import (FileBox) file_box = FileBox.</description>
    </item>
    
    <item>
      <title>wechaty-初识wechaty用途</title>
      <link>http://www.hello-api.cn/study/wechaty-001/</link>
      <pubDate>Mon, 15 Aug 2022 11:30:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/wechaty-001/</guid>
      <description>wechaty能做到什么 能自定制微信机器人服务,为你订造专属智能客服 能利用微信强大的社交机制带来潜在利益 github | 官网教程
其他教程 wechaty.readthedocs.io
有关视频教程资源:
live-coding
AI情话
准备阶段，有条件的小伙伴可以自己搭建一个服务端，好处就在于免费，或者可以使用网上其他提供协议,可参考 Padlocal协议 和 Paimon协议, 本教程主要以自搭建为主</description>
    </item>
    
    <item>
      <title>seo</title>
      <link>http://www.hello-api.cn/life/seo/</link>
      <pubDate>Mon, 15 Aug 2022 11:29:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/life/seo/</guid>
      <description>seo一般指搜索引擎优化，主要就是为了网站让更多人发现和访问，记录一下了解过程中有关的
5118.com 一种站长工具,支持各种的关键词搜索,对于检测seo有很大的帮助 百度站长平台
360站长平台
神马站长平台</description>
    </item>
    
    <item>
      <title>微信小程序-云收租</title>
      <link>http://www.hello-api.cn/life/wechat-rent/</link>
      <pubDate>Mon, 15 Aug 2022 11:28:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/life/wechat-rent/</guid>
      <description>实现功能模块
房屋模块
|-创建房子
|-创建合同
|-定时确认账单 统计模块
|-查阅最近1年每月的收支情况 |-获取到最新房屋合同的动态 推送模块 |-自定义订阅需要推送的日期 </description>
    </item>
    
    <item>
      <title>python-波场区块链的扫块系统</title>
      <link>http://www.hello-api.cn/life/python-tronlink-scan/</link>
      <pubDate>Mon, 15 Aug 2022 11:26:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/life/python-tronlink-scan/</guid>
      <description>[github]路径(https://github.com/suguer/python-tronlink-scan)
python-tronlink-scan 波场链的扫块功能,如果对于需要获取波场链上的交易情况,又没有条件部署一台自己的节点,那么采用本文的方式是一个不错的选择,通过调用接口也能及时获取到交易信息
安装需要的用到的插件
pip install -r requirements.txt 运行即可,有需要的可调整为数据库的结构来存
python main.py example: 需要记录的合约 config/contract.csv
地址|名称|精度
address,name,decimals TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t,USDT,6 TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8,USDC,6 TAFjULxiVgT4qWk6UZwjqwZXTSaGaqnVp4,BitTorrent,18 需要记录的钱包 config/wallet.csv
地址|密钥
address,private_key TSRg164MqUKMxDn2eQYvAg9iFNhQYXAFa8, TNV2h4c2ibuQKes5XTgwuuP9mdfQiAHxpL, TGn37A4yEjVBCXojhFNpZvovWvfNdzwC3x, 激活的要以 config/transaction.csv
hash|区块|发出地址|接收地址|区块时间|数额|合约地址|状态
hash,block,from,to,block_at,amount,contract_address,status f474e2ceb883637aae1f666adc7714309bf933cfd956173c68bd0512e2190f34,40967609,TPJA5T1QaJEZnCgujC36GpX2wGLYsYnqAh,TNV2h4c2ibuQKes5XTgwuuP9mdfQiAHxpL,2022-05-25 13:32:27,28.29,TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t,success fbd03d69af7ba8e1f7c56dd11738c8d6269497193daf0efa23eff3ed477e6f12,40969058,TJDFLrCiKneK2rXjCudn4gGMcYhVeqB8ru,TGn37A4yEjVBCXojhFNpZvovWvfNdzwC3x,2022-05-25 14:45:06,7229.02,TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t,success </description>
    </item>
    
    <item>
      <title>php-域名竞价模块</title>
      <link>http://www.hello-api.cn/life/php-domain-auction/</link>
      <pubDate>Mon, 15 Aug 2022 11:25:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/life/php-domain-auction/</guid>
      <description>域名竞价交易,即为域名充当交易物品进行价值交换,其中比较出名的有国内聚名 ,以及海外的GNAME, 以GNAME为例子讲述如何对接交易模块,
Gname的API接口文档
过期预定预定 预定结束=&amp;gt; [抢注成功直接得标, 抢注失败直接失标, 抢注失败需竞价] 竞价域名,涉及到本地多人出价的竞价已经与远端竞价的比较 [直接出价,代理出价] 竞价结束 =&amp;gt; [竞价成功,竞价失败] 简单描述竞价流程
竞价域名详情 DescribeAuctionInstance 参数 Domain 域名
检查竞价类型 本地竞价 检查竞价时间是否已过期等 远端竞价 同步远端竞价详情,根据实际情况是否更新本地的出价进度 ##竞价域名出价 CreateAuctionInstance
参数 Domain 域名 , Price 价格
同步远端竞价详情,根据实际情况是否更新本地的出价进度 判断是否需要闯入竞价 判断余额是否足够支付提交的冻结金 判断本地是否存在代理出价 有其他用户的代理出价,并且当前出价高于Price,直接出局 该用户的代理出价则比较金额大小 大于单次最低出价就要生成代理出价 提交请求远端的出价记录 </description>
    </item>
    
    <item>
      <title>从0到1 记录搭建Hugo个人博客-03 使用Algolia搜索</title>
      <link>http://www.hello-api.cn/tech/hugo-003/</link>
      <pubDate>Mon, 15 Aug 2022 11:24:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/hugo-003/</guid>
      <description>Hugo添加Algolia搜索支持 本文主要介绍如何在Hugo上增加Algolia的搜索支持,Alogolia官网
添加Algolia搜索支持主要以下步骤： ###1. 进入 Algolia 官网注册创建环境
个人使用选择免费版即可,可以满足日常需求了
地区若是国内则建议选择Hong Kong ,延迟较小效果比较好
最后提交即可
###2. 创建Application和Index 名称可自定义,我为了方便区别,创建都习惯用直接的域名作为名称 https://www.algolia.com/account/api-keys/all?applicationId=你的applicationId ###3. Hugo配置Algolia的环境
修改 config.toml 文件声明需要生成Algolia索引文件以及相关信息 [outputs]
home = [&amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;RSS&amp;rdquo;, &amp;ldquo;Algolia&amp;rdquo;]
&amp;hellip;中间省略
[outputFormats.Algolia]
baseName = &amp;ldquo;algolia&amp;rdquo;
isPlainText = true
mediaType = &amp;ldquo;application/json&amp;rdquo;
notAlternative = true
[params.algolia]
appId = &amp;ldquo;你的Application ID&amp;rdquo;
indexName = &amp;ldquo;你的索引名字&amp;rdquo;
searchOnlyKey = &amp;ldquo;你的Search-Only API Key&amp;rdquo;
注意outputs下面home的末尾有&amp;quot;Algolia&amp;quot;，漏了就不会生成了。 appId, indexName, searchOnlyKey 填写刚才记录的Algolia信息。
根目录下 layouts/_default (没有就新建) 文件夹中新建 list.algolia.json 文件，内容如下: {{/* 生成Algolia搜索索引文件 /}}
{{- $.Scratch.Add &amp;ldquo;index&amp;rdquo; slice -}}</description>
    </item>
    
    <item>
      <title>php-laravel升级注意事项</title>
      <link>http://www.hello-api.cn/study/php-laravel-002/</link>
      <pubDate>Mon, 15 Aug 2022 11:18:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-laravel-002/</guid>
      <description>官网 现在laravel的最新版已经升级到了9.0,目前公司还在用5.x版本,因此对于升级的注意事项做个记录,当做预防以后的踩坑
注意事项
同一个设置成支持php7.0,php8,新的9.0仅支持php8以上,为了能平滑迁移项目,需要服务器可支持2个版本 购物车插件gloudemans/shoppingcart 不可使用 , 测试 bumbummen99/shoppingcart 是否可替代 接收参数函数 Input::get() 废弃,用request()-&amp;gt;get() 替代 $input{$i+1} 花括号不可用 $input[$i+1] Route::controller 隐式控制路由废弃, 使用lesichkovm/laravel-advanced-route 插件 AdvancedRoute::controller 替代 队列在redis上保存的值有较大变动, laravel/vendor/laravel/framework/src/Illuminate/Queue/Queue.php createPayload函数 增加部分变量 laravel/vendor/laravel/framework/src/Illuminate/Queue/RedisQueue.php createPayload函数 attempts设置默认为0 原生类的构造函数改成__construct 对于整形和字符串判断更严格了,如mktime 参数必须是int; abs(&amp;quot;&amp;quot;) 会报错 有用到的废弃函数 create_function 需要更换 ORM查询返回的数据永远是obj类型, conf/database.inc.php 设置的$ORM-&amp;gt;setFetchMode(PDO::FETCH_ASSOC); 无效,源自 https://laravel.com/docs/5.4/upgrade 以上的记录是我实际的项目产生的问题,因此不一定适合大部分人
正则表达式替换php7的语法警告
(\$[a-zA-Z\_]+)\[([a-zA-Z]+[a-zA-Z\_\d]*)\] $1[&amp;#39;$2&amp;#39;] </description>
    </item>
    
    <item>
      <title>php-总结laravel使用技巧-001</title>
      <link>http://www.hello-api.cn/study/php-laravel-001/</link>
      <pubDate>Mon, 15 Aug 2022 11:05:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-laravel-001/</guid>
      <description>是否有人对于每次写一个laravel的控制器都要在路由上写一堆的声明路由感到麻烦,后期维护又不好处理,这里总结下如何让自己写出的接口更加规范格式化,本人在laravel项目中使用了dingo/api
.env上配置dingo的配置信息 #Dingo API API_PREFIX=api API_VERSION=v1 API_DEBUG=true 在route.php的路由方法中添加这几行代码 $api = app(&amp;#39;Dingo\Api\Routing\Router&amp;#39;); $api-&amp;gt;version(&amp;#39;v1&amp;#39;, function ($api) { $api-&amp;gt;any(&amp;#39;{slug}&amp;#39;, &amp;#39;\App\Http\ApiRouter@route&amp;#39;)-&amp;gt;where(&amp;#39;slug&amp;#39;, &amp;#39;(.*)?&amp;#39;); }); 封装统一入口ApiRouter.php use App; use Dingo\Api\Routing\Helpers; use Illuminate\Routing\Controller; use Illuminate\Support\Str; use core\util\router\RouterHelper; class ApiRouter extends Controller { use Helpers; private $ns; const API_NS = &amp;#39;core\bapi&amp;#39;; function __construct($ns) { header(&amp;#39;Access-Control-Allow-Origin: *&amp;#39;); header(&amp;#39;Access-Control-Allow-Methods:*&amp;#39;); header(&amp;#39;Access-Control-Allow-Headers:*&amp;#39;); $this-&amp;gt;ns = $ns; } /** * @var string Allows early access to page action. */ public static $action; /** * @var array Allows early access to page parameters.</description>
    </item>
    
    <item>
      <title>php-分享自有系统接入OCR图片识别</title>
      <link>http://www.hello-api.cn/tech/php-ocr/</link>
      <pubDate>Mon, 15 Aug 2022 10:35:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/php-ocr/</guid>
      <description>前言 最近比较了几家大的云平台产品,发现百度云的ocr识别,只要通过了企业认证的话,可以每天免费获取一定额度的使用,因此在这里分享下如何使用ocr识别api
目标 可用在实现内部员工系统的快速身份认证,或者部分客户的营业执照和个人认证,注意仅限小量内部使用,如需用在正式环境中建议购买足够的流量包
前置条件 开发环境 PHP 百度云能企业认证
正式内容 百度接口的认证方式 百度的鉴权方式是以Token的方式,具体教程可查看官网API,这里不重复说明了
function getToken 封装下获取Token的方式,避免重复请求次数过于频繁
public function getToken() { $filename = &amp;#34;/data/baidu_access_token.{$this-&amp;gt;access_key}.json&amp;#34;; if (file_exists($filename)) { $content = file_get_contents($filename); if ($content) { $json = json_decode($content, 1); if (strtotime($json[&amp;#39;expires_in&amp;#39;]) &amp;gt; time()) { return $json[&amp;#39;access_token&amp;#39;]; } } } $resp = json_decode($this-&amp;gt;client-&amp;gt;request(&amp;#34;POST&amp;#34;, &amp;#34;https://aip.baidubce.com/oauth/2.0/token&amp;#34;, [ &amp;#39;form_params&amp;#39; =&amp;gt; [ &amp;#39;grant_type&amp;#39; =&amp;gt; &amp;#39;client_credentials&amp;#39;, &amp;#39;client_id&amp;#39; =&amp;gt; $this-&amp;gt;access_key, &amp;#39;client_secret&amp;#39; =&amp;gt; $this-&amp;gt;secret_key, ] ])-&amp;gt;getBody()-&amp;gt;getContents(), 1); $data = [ &amp;#39;access_token&amp;#39; =&amp;gt; $resp[&amp;#39;access_token&amp;#39;], &amp;#39;expires_in&amp;#39; =&amp;gt; date(&amp;#34;Y-m-d H:i:s&amp;#34;, strtotime(&amp;#34;+29 day&amp;#34;)), ]; file_put_contents($filename, json_encode($data, JSON_UNESCAPED_UNICODE)); return $resp[&amp;#39;access_token&amp;#39;]; } private function request($action, $p) { $option = [ &amp;#39;query&amp;#39; =&amp;gt; [ &amp;#39;access_token&amp;#39; =&amp;gt; $this-&amp;gt;getToken(), ], ]; if ($this-&amp;gt;target == &amp;#39;face&amp;#39;) { $option[&amp;#39;json&amp;#39;] = $p; } else { $option[&amp;#39;form_params&amp;#39;] = $p; } $resp = $this-&amp;gt;client-&amp;gt;request(&amp;#34;POST&amp;#34;, &amp;#34;{$api_url}/{$action}&amp;#34;, $option) -&amp;gt;getBody() -&amp;gt;getContents(); return json_decode($resp, true); } 身份证识别 function OcrIdcard 先展示官方文档,文档中可看出ocr的识别支持两种提交方式,图片的base64或者图片url,因此这里稍微封装一下</description>
    </item>
    
    <item>
      <title>Php-自定义封装加密方法</title>
      <link>http://www.hello-api.cn/study/php-encrypter/</link>
      <pubDate>Mon, 15 Aug 2022 10:34:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-encrypter/</guid>
      <description>/** * 自定义的一个加解密插件 * User: staff * Date: 2019/3/27 * Time: 16:13 */ class Encrypter { private static $key = &amp;#34;ZmUbqPipJ0Pr7tGmkHDBazjpbKjFZc7S&amp;#34;; private static $cipher = &amp;#34;AES-256-CBC&amp;#34;; public static function encrypt($str) { $ivlen = openssl_cipher_iv_length(self::$cipher); $iv = openssl_random_pseudo_bytes($ivlen); $value = openssl_encrypt($str, self::$cipher, self::$key, 0, $iv); $iv = base64_encode($iv); $param = [ &amp;#39;iv&amp;#39; =&amp;gt; $iv, &amp;#39;value&amp;#39; =&amp;gt; $value ]; return base64_encode(json_encode($param)); } public static function decrypt($str) { $payload = self::getJsonPayload($str); $iv = base64_decode($payload[&amp;#39;iv&amp;#39;]); $decrypted = openssl_decrypt($payload[&amp;#39;value&amp;#39;], self::$cipher, self::$key, 0, $iv); return $decrypted; } /** * @param $payload * @return array */ static function getJsonPayload($payload) { $payload = json_decode(base64_decode($payload), true); return $payload; } } </description>
    </item>
    
    <item>
      <title>Php邮件收取imap</title>
      <link>http://www.hello-api.cn/tech/php-imap/</link>
      <pubDate>Fri, 12 Aug 2022 17:32:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/php-imap/</guid>
      <description>前言 招商银行的收款通知可以添加邮件推送,因此利用php-imap收取邮件,可达到自动化确款的目的
目标 前置条件 composer require php-imap/php-imap
正式内容 php-imap 的使用 $mailbox = new Mailbox( &amp;#39;{SMTP服务器:SMTP端口号/imap}INBOX&amp;#39;, // IMAP server and mailbox folder &amp;#39;邮箱账号&amp;#39;, // Username for the before configured mailbox &amp;#39;邮箱密码&amp;#39;, // Password for the before configured username null, // Directory, where attachments will be saved (optional) &amp;#39;UTF-8&amp;#39; // Server encoding (optional) ); try { $mailsIds = $mailbox-&amp;gt;searchMailbox(&amp;#39;ALL&amp;#39;); } catch (PhpImap\Exceptions\ConnectionException $ex) { echo &amp;#34;IMAP connection failed: &amp;#34; . $ex; die(); } rsort($mailsIds); foreach ($mailsIds as $key =&amp;gt; $item) { //循环遍历 $mail = $mailbox-&amp;gt;getMail($item); $fromAddress = $mail-&amp;gt;fromAddress; $content = $mail-&amp;gt;textHtml; if(!</description>
    </item>
    
    <item>
      <title>从0到1 用宝塔集成虚拟主机提供商</title>
      <link>http://www.hello-api.cn/tech/baota/</link>
      <pubDate>Fri, 12 Aug 2022 16:55:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/baota/</guid>
      <description>前言 对比一般市场上的虚拟主机,宝塔都能兼容支持绝大多数的功能,并且宝塔有个比较大的特点为,页面上的接口均可以通过api请求,因此产生了这个想法定制出宝塔基础的虚拟主机
目标 前置条件 window server的主机
宝塔需安装在数据盘D盘上
正式内容 定义的配置文件 /data/vhost/baota.conf.json
[ { &amp;#34;fchrServer&amp;#34;:&amp;#34;flage&amp;#34;, &amp;#34;host&amp;#34;:&amp;#34;127.0.0.1&amp;#34;, &amp;#34;key&amp;#34;:&amp;#34;bt_api_key&amp;#34;, &amp;#34;port&amp;#34;:&amp;#34;8888&amp;#34;, &amp;#34;mysql&amp;#34;:&amp;#34;mysql_password&amp;#34;, &amp;#34;sqlserver&amp;#34;:&amp;#34;mssql_password&amp;#34;, &amp;#34;region_id&amp;#34;:&amp;#34;hk&amp;#34;, &amp;#34;zone_id&amp;#34;:&amp;#34;hk-02&amp;#34;, &amp;#34;network&amp;#34;:&amp;#34;bgp&amp;#34; } ] 封装好的交互php函数方法
class VhostBaotaClient implements VhostClientInterface { use ApiConfigTrait; use ApiLoggerTrait; private $client; private $key = &amp;#34;&amp;#34;; public $host = &amp;#34;&amp;#34;; private $port = &amp;#34;8888&amp;#34;; private $mssql_password = &amp;#34;&amp;#34;; /** * @var array 远端主机的状态转换 */ public $RemoteStatus = [ &amp;#39;1&amp;#39; =&amp;gt; &amp;#39;Running&amp;#39;, &amp;#39;0&amp;#39; =&amp;gt; &amp;#39;Stopped&amp;#39;, ]; public $IISRemoteStatus = [ &amp;#39;Started&amp;#39; =&amp;gt; &amp;#39;Running&amp;#39;, &amp;#39;Stopped&amp;#39; =&amp;gt; &amp;#39;Stopped&amp;#39;, ]; public static function getConfig() { return json_decode(file_get_contents(&amp;#39;/data/vhost/baota.</description>
    </item>
    
    <item>
      <title>Php-根据经纬度计算直线距离</title>
      <link>http://www.hello-api.cn/study/php-distance/</link>
      <pubDate>Fri, 12 Aug 2022 16:53:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-distance/</guid>
      <description> static public $DEF_PI = 3.14159265359; // PI static public $DEF_2PI= 6.28318530712; // 2*PI static public $DEF_PI180= 0.01745329252; // PI/180.0 static public $DEF_R =6370693.5; // radius of earth /** * 适用于近距离测直线距离 */ public static function GetShortDistance($lon1, $lat1, $lon2, $lat2) { // 角度转换为弧度 $ew1 = $lon1 * self::$DEF_PI180; $ns1 = $lat1 * self::$DEF_PI180; $ew2 = $lon2 * self::$DEF_PI180; $ns2 = $lat2 * self::$DEF_PI180; // 经度差 $dew = $ew1 - $ew2; // 若跨东经和西经180 度，进行调整 if ($dew &amp;gt; self::$DEF_PI) $dew = self::$DEF_2PI - $dew; else if ($dew &amp;lt; -self::$DEF_PI) $dew = self::$DEF_2PI + $dew; $dx = self::$DEF_R * cos($ns1) * $dew; // 东西方向长度(在纬度圈上的投影长度) $dy = self::$DEF_R * ($ns1 - $ns2); // 南北方向长度(在经度圈上的投影长度) // 勾股定理求斜边长 $distance = sqrt($dx * $dx + $dy * $dy); return $distance; } </description>
    </item>
    
    <item>
      <title>Php-编码解码punycode</title>
      <link>http://www.hello-api.cn/tech/php-punycode/</link>
      <pubDate>Fri, 12 Aug 2022 16:51:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/php-punycode/</guid>
      <description>前言 域名的编码解码
什么是PunyCode 英文域名在IIS或Apache中的虚拟主机设置，可以直接使用英文域名，如webmasterhome.cn。 中文域名在IIS或Apache中应如何设置主机头呢
在进行设置之前要先把中文域名转化成为PunyCode编码，然后在主机头设置里面填上中文域名所对应的PunyCode编码(xn&amp;ndash;fiqsC146Ah4ex80Cro7A.com)便可。 新的国际化域名的标准在网域名称编码上，为了保留向下兼容性及不影响现有的应用程序协议，因此将多国语言域名转成ASCII编码
目标 前置条件 正式内容 &amp;lt;?php class Punycode { const TMIN=1; const TMAX=26; const BASE = 36; const INITIAL_N = 128; const INITIAL_BIAS = 72; const DAMP = 700; const SKEW = 38; const DELIMITER = &amp;#39;-&amp;#39;; const MAXINT = 2147483647; //encode编码时候的错误返回值 const ERROR_BAD_INPUT = -1; const ERROR_BIG_OUTPUT = -2; const ERROR_OVERFLOW = -3; /** * 配置 * 1: 使用iconv * 2: iconv Unicode-1-1 * 3: 使用mb_convert_encoding(较通用，需mb_string支持) */ const CHARSET_MODE = 3; /** * punycode编码 * @param string $input * 输入的字符传不能有空格.</description>
    </item>
    
    <item>
      <title>Php-生成ssl证书所需的csr信息</title>
      <link>http://www.hello-api.cn/study/php-ssl/</link>
      <pubDate>Fri, 12 Aug 2022 16:45:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/php-ssl/</guid>
      <description>/** * 生成CSR和KEY */ public function CreateCsr() { $all = request()-&amp;gt;all(); $dn = [ &amp;#34;countryName&amp;#34; =&amp;gt; trim(strtoupper($all[&amp;#39;countryName&amp;#39;])), //所在国家 &amp;#34;stateOrProvinceName&amp;#34; =&amp;gt; trim($all[&amp;#39;stateOrProvinceName&amp;#39;]), //所在省份 &amp;#34;localityName&amp;#34; =&amp;gt; trim($all[&amp;#39;localityName&amp;#39;]), //所在城市 &amp;#34;organizationName&amp;#34; =&amp;gt; trim($all[&amp;#39;organizationName&amp;#39;]), //注册人姓名 &amp;#34;organizationalUnitName&amp;#34; =&amp;gt; trim($all[&amp;#39;organizationalUnitName&amp;#39;]), //组织名称 &amp;#34;commonName&amp;#34; =&amp;gt; trim($all[&amp;#39;commonName&amp;#39;]), //公共名称 ]; if (isset($all[&amp;#39;emailAddress&amp;#39;]) &amp;amp;&amp;amp; $all[&amp;#39;emailAddress&amp;#39;]) { $dn[&amp;#39;emailAddress&amp;#39;] = $all[&amp;#39;emailAddress&amp;#39;]; } $config = [ &amp;#34;private_key_bits&amp;#34; =&amp;gt; isset($all[&amp;#39;keysize&amp;#39;]) &amp;amp;&amp;amp; $all[&amp;#39;keysize&amp;#39;] ? $all[&amp;#39;keysize&amp;#39;] : 2048, //字节数 512 1024 2048 4096 等 &amp;#34;private_key_type&amp;#34; =&amp;gt; OPENSSL_KEYTYPE_RSA, //加密类型 &amp;#39;digest_alg&amp;#39; =&amp;gt; &amp;#39;sha256&amp;#39;, ]; $privkey = openssl_pkey_new($config); if ($privkey === false) { $config[&amp;#39;config&amp;#39;] = &amp;#34;D:/phpstudy_pro/Extensions/Apache2.</description>
    </item>
    
    <item>
      <title>Php-Swagger代码了解</title>
      <link>http://www.hello-api.cn/tech/php-swagger/</link>
      <pubDate>Fri, 12 Aug 2022 16:06:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/php-swagger/</guid>
      <description>前言 良好的文档规范,对于前后端的沟通是很有必要的,减少没必要的误解和争执,前端也可以根据文档的格式先制定出页面的流程和提前mock数据开发
目标 前置条件 zircote/swagger-php document
正式内容 1. 基础了解定义文档的语法 文档描述 @OA\Info(title=&amp;ldquo;Fapi&amp;rdquo;, version=&amp;ldquo;0.1&amp;rdquo;,description=&amp;ldquo;antdv5的接口前缀为/api/v2
当前版本为/api/返回列表的格式有区别外其他一致&amp;rdquo;),
文档中的api路径 @OA\Server(url=&amp;ldquo;http://www.github.com/&amp;quot;,description=&amp;quot;github&amp;quot;,),
预先定义好返回数据的格式 @OA\Schema(
schema=&amp;ldquo;Pagination&amp;rdquo;,
@OA\Property(property=&amp;ldquo;current&amp;rdquo;, type=&amp;ldquo;integer&amp;rdquo;),
@OA\Property(property=&amp;ldquo;total&amp;rdquo;, type=&amp;ldquo;integer&amp;rdquo;),
@OA\Property(property=&amp;ldquo;pageSize&amp;rdquo;, type=&amp;ldquo;integer&amp;rdquo;),
)
分组每种接口的类别,如/user, /order /record 等, @OA\Tag(name=&amp;ldquo;api-tag&amp;rdquo;, description=&amp;ldquo;Tag&amp;rdquo;)
编写接口的声明 @OA\Post( path=&amp;#34;/api/index&amp;#34;, summary=&amp;#34;api name&amp;#34;, operationId=&amp;#34;UniqueOperationId&amp;#34;, tags={&amp;#34;api-tag&amp;#34;}, @OA\Parameter(in=&amp;#34;query&amp;#34;, name=&amp;#34;fIDDomainFolder&amp;#34;, required=false,schema={&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;},description=&amp;#34;&amp;#34;), @OA\Parameter(in=&amp;#34;query&amp;#34;, name=&amp;#34;intActive&amp;#34;, required=false,schema={&amp;#34;type&amp;#34;:&amp;#34;integer&amp;#34;},description=&amp;#34;&amp;#34;), @OA\Parameter(in=&amp;#34;query&amp;#34;, name=&amp;#34;timetype&amp;#34;, required=false,schema={&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;,&amp;#34;enum&amp;#34;:{&amp;#34;created_at&amp;#34;,&amp;#34;expired_at&amp;#34;,&amp;#34;update_at&amp;#34;}},description=&amp;#34;时间类型&amp;#34;), @OA\Response( response=&amp;#34;200&amp;#34;, description=&amp;#34;An example resource&amp;#34;, @OA\JsonContent( @OA\Property(property=&amp;#34;Pagination&amp;#34;,type=&amp;#34;object&amp;#34;, ref=&amp;#34;#/components/schemas/Pagination&amp;#34;), ) ), ) 2. 将定义好的注释声明生成openapi.json $openapi = \OpenApi\Generator::scan([ path . &amp;#39;api&amp;#39;, path . &amp;#39;model&amp;#39;, ]); $openapi-&amp;gt;toJson() 3.</description>
    </item>
    
    <item>
      <title>Php支付接口</title>
      <link>http://www.hello-api.cn/tech/php-pay/</link>
      <pubDate>Fri, 12 Aug 2022 15:32:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/php-pay/</guid>
      <description>前言 项目上需要接触到不同种类的支付平台,有一些其他第三方平台的支付也是为了企业没资质或为了得到更好的费率原因,因此也总结一下个人在开发中的使用记录
目标 通过合并支付的接口,让用户在选择支付上能更简单快捷
前置条件 相关支付平台都有自己的支付申请条件,因此根据需求自行了解注册 环境 PHP
正式内容 支付的需求最主要在于3个接口的实现
interface PaymentClientInterface { /** * 支付请求 * @param $order_out_no * @param $total_fee * @param array $param * @return mixed */ public function pay($out_trade_no,$total_fee,$param=[]); /** * 查询支付结果 * @return mixed */ public function query($out_trade_no,$param=[]); /** * 支付回调,由于各支付平台的参数都不同,因此返回原始信息自己处理 * @param $all * @return mixed */ public function handle($all); } wechat 微信支付 public function query($out_trade_no, $param = []) { $action = &amp;#34;/v3/pay/transactions/out-trade-no/{$out_trade_no}&amp;#34;; $resp = $this-&amp;gt;request($action, [], &amp;#39;GET&amp;#39;); return $resp; } private function sign($url, $params, $method) { $params[&amp;#39;mchid&amp;#39;] = $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;mch_id&amp;#39;]; $serial_no = $this-&amp;gt;apiConfig-&amp;gt;ExtraConfig[&amp;#39;serial_no&amp;#39;]; $mch_private_key = file_get_contents(&amp;#34;/conf/wechat_private_key.</description>
    </item>
    
    <item>
      <title>Python-初学tensorflow第二天-学习例子</title>
      <link>http://www.hello-api.cn/study/python-tensorflow-002/</link>
      <pubDate>Fri, 12 Aug 2022 15:18:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/python-tensorflow-002/</guid>
      <description>学习来源Bilibili 根据例子编写出线性回归方程
import tensorflow as tf import pandas as pd data=pd.read_csv(&amp;#39;./demo1.csv&amp;#39;) x=data.Education y=data.Income model=tf.keras.Sequential(()) model.add(tf.keras.layers.Dense(1,input_shape=(1,))) model.compile(optimizer=&amp;#39;adam&amp;#39;,loss=&amp;#39;mse&amp;#39;) history=model.fit(x,y,epochs=10000) res=model.predict(pd.Series([20])) print(res) ,Education,Income
1,10.000000 ,26.658839
2,10.401338 ,27.306435
3,10.842809 ,22.132410
4,11.244147 ,21.169841
5,11.645449 ,15.192634
6,12.086957 ,26.398951
7,12.048829 ,17.435307
8,12.889632 ,25.507885
9,13.290970 ,36.884595
10,13.732441 ,39.666109
11,14.133779 ,34.396281
12,14.635117 ,41.497994
13,14.978589 ,44.981575
14,15.377926 ,47.039595
15,15.779264 ,48.252578
16,16.220736 ,57.034251
17,16.622074 ,51.490919
18,17.023411 ,51.336621
19,17.464883 ,57.681998
20,17.866221 ,68.553714
21,18.267559 ,64.310925
22,18.709030 ,68.959009
23,19.110368 ,74.614639
24,19.511706 ,71.867195
25,19.913043 ,76.098135</description>
    </item>
    
    <item>
      <title>Python-初学tensorflow第一天-搭建环境</title>
      <link>http://www.hello-api.cn/study/python-tensorflow-001/</link>
      <pubDate>Fri, 12 Aug 2022 15:12:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/python-tensorflow-001/</guid>
      <description>初学第一天主要学习如果搭建环境和快捷安装TensorFlow的扩展
打开miniconda官网 选择合适自己的系统来安装python环境 安装TensorFlow扩展 : pip install tensorflow==2.8.0 可能pip版本不够导致安装失败 easy_install -U pip 安装其他所需的包: pip install pandas matplotlib nodebook pandas 数据分析库 matplotlib python绘图库 nodebook 基于web的开发环境 安装cuda 安装pytorch Q: 运行失败时返回 Could not load dynamic library &amp;lsquo;cudart64_110.dll&amp;rsquo;; dlerror: cudart64_110.dll not found A: 在截图中找到相应的版本后,打开 nvidia
Q: 安装cuda失败时返回 you already have a newer version of the nvdia frameview sdk installed
A: 找到C:\Program Files\NVIDIA Corporation\FrameViewSDK文件夹进行卸载
Q: 安装cuda一直安装不成功,nsight visual studio edition提示安装失败 A: 尝试卸载电脑的Visual Studio Community
Q: Downgrade the protobuf package to 3.</description>
    </item>
    
    <item>
      <title>Python-多线程</title>
      <link>http://www.hello-api.cn/tech/python-thread/</link>
      <pubDate>Fri, 12 Aug 2022 15:10:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/python-thread/</guid>
      <description>import sys import threading import queue import traceback import statistics class NoResultsPending(Exception): &amp;#34;&amp;#34;&amp;#34;All works requests have been processed&amp;#34;&amp;#34;&amp;#34; pass class NoWorkersAvailable(Exception): &amp;#34;&amp;#34;&amp;#34;No worket threads available to process remaining requests.&amp;#34;&amp;#34;&amp;#34; pass def _handle_thread_exception(request, exc_info): &amp;#34;&amp;#34;&amp;#34;默认的异常处理函数，只是简单的打印&amp;#34;&amp;#34;&amp;#34; traceback.print_exception(*exc_info) #classes class WorkerThread(threading.Thread): &amp;#34;&amp;#34;&amp;#34;后台线程，真正的工作线程，从请求队列(requestQueue)中获取work， 并将执行后的结果添加到结果队列(resultQueue)&amp;#34;&amp;#34;&amp;#34; def __init__(self,requestQueue,resultQueue,poll_timeout=5,**kwds): threading.Thread.__init__(self,**kwds) &amp;#39;&amp;#39;&amp;#39;设置为守护进行&amp;#39;&amp;#39;&amp;#39; self.setDaemon(True) self._requestQueue = requestQueue self._resultQueue = resultQueue self._poll_timeout = poll_timeout &amp;#39;&amp;#39;&amp;#39;设置一个flag信号，用来表示该线程是否还被dismiss,默认为false&amp;#39;&amp;#39;&amp;#39; self._dismissed = threading.Event() self.start() # self.join() def run(self): &amp;#39;&amp;#39;&amp;#39;每个线程尽可能多的执行work，所以采用loop， 只要线程可用，并且requestQueue有work未完成，则一直loop&amp;#39;&amp;#39;&amp;#39; while True: if self._dismissed.is_set(): break try: &amp;#39;&amp;#39;&amp;#39; Queue.</description>
    </item>
    
    <item>
      <title>初始Python-自动化操作</title>
      <link>http://www.hello-api.cn/study/python-selenium/</link>
      <pubDate>Fri, 12 Aug 2022 15:10:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/python-selenium/</guid>
      <description>Selenium是一个用于测试网站的自动化测试工具，支持各种浏览器包括Chrome、Firefox、Safari等主流界面浏览器，同时也支持phantomJS无界面浏览器。
以下是我在实际使用中对于selenium的一些心得和用法
implicitly_wait
等待浏览器的相应时间,与sleep的区别在于implicitly_wait是设置的值或页面超时优先,而sleep则是固定睡眠时间,我在用的时候则是2个都同时使用.确保页面能顺利加载到需要的数据
xpath 如果需要用selenium进行简单的爬虫和模拟浏览,那么xpath的语法是必须要了解明白的,html语言中比起正则,xpath的代码更加清晰和直观
click 对于按钮的点击事件,推荐用
driver.execute_script(&amp;#34;arguments[0].click();&amp;#34;, nextButton) 据说.click()会导致报错,虽然我还没遇到过</description>
    </item>
    
    <item>
      <title>初始Python-文件操作</title>
      <link>http://www.hello-api.cn/study/python-001/</link>
      <pubDate>Fri, 12 Aug 2022 15:05:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/python-001/</guid>
      <description>列出指定目录下的全部文件
import os file_array=[] dir_array=[ os.getcwd() + &amp;#34;/directory1/&amp;#34;, os.getcwd() + &amp;#34;/directory2/&amp;#34;, ] for dir in dir_array: for root, dirs, files in os.walk(dir): for filename in files: file_array.append(dir+filename) Excel操作读写
wb = xlrd.open_workbook(filepath) sh = wb.sheet_by_name(&amp;#39;数据明细&amp;#39;) # print(sh.nrows) # 有效数据行数 # print(sh.ncols) # 有效数据列数 for index in range(len(sh.row_values(0))): title = sh.row_values(0)[index] </description>
    </item>
    
    <item>
      <title>Https双向认证</title>
      <link>http://www.hello-api.cn/tech/https/</link>
      <pubDate>Fri, 12 Aug 2022 13:51:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/https/</guid>
      <description>前言 由于公司需求一些措施加强员工登录企业后台网站的验证,所以了解了一下有关https的双向认证,并部署到生产环境上,因此记录下来部署的流程分享一下遇到的问题
目标 每个员工有各自的验证密钥,只能在自己的电脑上登录验证,防止员工之间的替名篡改或者恶意操作
前置条件 拥有一张根证书,用于签发员工用的,如没有可参考教程创建 PHP
正式内容 参考链接:
阿里云指导openssl签发流程 https://help.aliyun.com/document_detail/160093.html?spm=5176.10695662.1996646101.searchclickresult.480f29d22TQ6uz
php官方文档
https://www.php.net/manual/en/function.openssl-csr-sign.php
$cacert = &amp;ldquo;file://path/to/ca.crt&amp;rdquo;; 文档中此处值得ca.crt是下面所指的root.pem,不是根证书的root.crt,不一样的~~
使用工具 openssl 创建根证书私钥： openssl genrsa -out root.key 1024
创建根证书请求文件： openssl req -new -out root.csr -key root.key
后续参数的例子提供:
Country Name (2 letter code) [AU]:cn State or Province Name (full name) [Some-State]:gd Locality Name (eg, city) []:zh Organization Name (eg, company) [Internet Widgits Pty Ltd]:company Organizational Unit Name (eg, section) []:it Common Name (e.g. server FQDN or YOUR name) []:root 创建根证书： openssl x509 -req -in root.</description>
    </item>
    
    <item>
      <title>Apache</title>
      <link>http://www.hello-api.cn/study/apache/</link>
      <pubDate>Fri, 12 Aug 2022 13:47:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/apache/</guid>
      <description> apacha限制某个目录的php执行 &amp;lt;Directory /public/protected/controllers&amp;gt; php_flag engine off &amp;lt;/Directory&amp;gt; 需要注意网站已经定义的路径，如果涉及到软路径，一律以已经定义的路径为准。
apacha动态IP黑名单 能简单的设置apache黑名单,配合自己的项目能有效禁止非法IP高频的访问 http.conf &amp;lt;VirtualHost *:443&amp;gt; RewriteMap ipmap txt:ipmap.txt 项目.htaccess
RewriteCond ${ipmap:%{REMOTE_ADDR}} ^b$ [NC] RewriteRule .* - [F,L] ipmap.txt 内容
127.0.0.1 b 8.8.8.8 b </description>
    </item>
    
    <item>
      <title>Centos-工作中随手的记录</title>
      <link>http://www.hello-api.cn/study/centos/</link>
      <pubDate>Fri, 12 Aug 2022 13:46:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/centos/</guid>
      <description> CentOS7利用yum安装node.js curl -sL https://rpm.nodesource.com/setup_16.x | bash - yum install -y nodejs node -v cnpm安装 npm install -g cnpm --registry=https://registry.npmmirror.com CentOS7 安装pip3 yum install epel-release yum install https://centos7.iuscommunity.org/ius-release.rpm 多个文件内容搜索特定关键词 grep -ln &amp;ldquo;keyword&amp;rdquo; 05-01-00hour.log &amp;hellip;(可以携带多个文件名)
打印存在关键词的文件名
05-19-19hour.log
05-20-00hour.log </description>
    </item>
    
    <item>
      <title>Prerender-单页面前端渲染</title>
      <link>http://www.hello-api.cn/tech/prerender/</link>
      <pubDate>Fri, 12 Aug 2022 13:44:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/prerender/</guid>
      <description>预渲染,用于前端单页面的项目,做到被seo收录的
#创建用户 useradd -d /home/prerender -m prerender
#安装nginx cd /usr/local wget http://nginx.org/download/nginx-1.16.1.tar.gz tar -xzf nginx-1.16.1.tar.gz cd nginx-1.16.1 ./configure &amp;ndash;with-http_ssl_module make make install
#测试prerender cd /home/prerender #https://github.com/prerender/prerender npm install prerender npm install prerender-memory-cache &amp;ndash;save vi server.js const prerender = require(&amp;lsquo;prerender&amp;rsquo;); const server = prerender();
server.use(require(&amp;lsquo;prerender-memory-cache&amp;rsquo;))
server.start(); node server #访问 http://ip:3000/render?url=http://www.baidu.com
#配置nginx #参考https://gist.github.com/thoop/8165802 /usr/local/nginx/sbin/nginx -c /home/prerender/nginx.conf /usr/local/nginx/sbin/nginx -s stop
nginx.conf
events { worker_connections 1024; } http { include /usr/local/nginx/conf/mime.types; default_type application/octet-stream; # Change YOUR_TOKEN to your prerender token # Change example.</description>
    </item>
    
    <item>
      <title>gitfun</title>
      <link>http://www.hello-api.cn/study/gitfun/</link>
      <pubDate>Fri, 12 Aug 2022 12:29:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/gitfun/</guid>
      <description>用于git角色登录服务器,触发版本pull和同步 /home/git/gitfun.inc.sh
#!/bin/sh /bin/stty intr &amp;#39;&amp;#39; function git_checkout() { if [ -d $checkout_path/.git ];then cd $checkout_path git pull $git_url #git pull $git_url $branch #checkout a branch chmod 700 $checkout_path/.git echo $git_url update finish! else mkdir -p $checkout_path if [ ! -d $checkout_path ];then exit fi cd $checkout_path/../ git clone $git_url #git checkout $branch #switch to branch chmod 700 $checkout_path/.git if [ -d $checkout_path/.git ];then echo $git_url has checkout successfully! fi fi } function git_checkout_branch() { if [ -d $checkout_path/.</description>
    </item>
    
    <item>
      <title>Nginx-实现网站简繁体转换</title>
      <link>http://www.hello-api.cn/tech/nginx-002/</link>
      <pubDate>Fri, 12 Aug 2022 12:27:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/nginx-002/</guid>
      <description>这个利用nginx（openresty）+lua+opencc，写10行代码左右就可以实现的类似繁简通的功能 可充分利用nginx的快反应和可靠性
所需插件
https://github.com/BYVoid/OpenCC
https://github.com/Finalcheat/lua-resty-opencc/blob/master/lib/resty/opencc.lua
opencc在centos7可以用yum安装，但版本很旧 yum install doxygen opencc opencc-tools opencc-devel centos7上编译新版本可能要升级gcc，比较麻烦，我在centos8上编译过新版本 参考： yum install cmake gcc-c++ bison flex http://www.doxygen.nl/download.html https://bintray.com/byvoid/opencc/OpenCC ln -s /user/bin/python3.6 /user/bin/python ln -s /usr/lib/libopencc.so.2 /usr/lib64/libopencc.so.2
安装openresty后opencc.lua放到/usr/local/openresty/lualib/resty/
opencc.lua
if (ngx.var.sent_http_content_type ~= nil and string.sub(ngx.var.sent_http_content_type, 1, 4) == &amp;#34;text&amp;#34;) then local data=ngx.ctx.data or &amp;#34;&amp;#34; local cdata=ngx.arg[1] data=data..cdata ngx.ctx.data=data if ngx.arg[2] then local opencc = require(&amp;#34;resty.opencc&amp;#34;) -- local o = opencc:new(&amp;#34;zhs2zht.ini&amp;#34;) -- opencc 0.4.x local o = opencc:new(&amp;#34;s2hk.json&amp;#34;) ngx.</description>
    </item>
    
    <item>
      <title>Nginx-了解Lua用法</title>
      <link>http://www.hello-api.cn/tech/nginx-001/</link>
      <pubDate>Fri, 12 Aug 2022 12:25:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/nginx-001/</guid>
      <description>用lua实现访问限制,木桶效应
nginx.conf
server{ location / { access_by_lua_file /usr/local/openresty/nginx/conf/lua/domain_check.lua; index index.html index.htm; } } 限制每个IP一段时间内能访问多少次
domain_check.lua
local client = require &amp;#34;resty.websocket.client&amp;#34; local limit_req = require &amp;#34;resty.limit.req&amp;#34; local limit_rate = 150 local limit_burst = 50 local limit_req = require &amp;#34;resty.limit.req&amp;#34; local lim, err = limit_req.new(&amp;#34;my_limit_req_store&amp;#34;, limit_rate, limit_burst) -- 这里设置rate=2/s，漏桶桶容量设置为0，（也就是来多少水就留多少水） -- 因为resty.limit.req代码中控制粒度为毫秒级别，所以可以做到毫秒级别的平滑处理 if not lim then -- ngx.log(ngx.ERR, &amp;#34;failed to instantiate a resty.limit.req object: &amp;#34;, err) return ngx.exit(500) end local key = ngx.var.binary_remote_addr local delay, err = lim:incoming(key, true) if not delay then if err == &amp;#34;rejected&amp;#34; then return ngx.</description>
    </item>
    
    <item>
      <title>Nginx使用过程中的记录</title>
      <link>http://www.hello-api.cn/tech/nginx-node/</link>
      <pubDate>Fri, 12 Aug 2022 12:25:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/nginx-node/</guid>
      <description>How to format log (eg: Y-m-d.log) http { map $host $fmt_localdate { default &amp;#39;&amp;#39;;} map $host $fmt_localtime { default &amp;#39;&amp;#39;;} log_by_lua_block { ngx.var.fmt_localdate = os.date(&amp;#34;%Y-%m-%d&amp;#34;); ngx.var.fmt_localtime = os.date(&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;); } log_format main &amp;#39;[$host][$remote_addr][$fmt_localtime][$http_referer][$http_user_agent]&amp;#39;; server { access_log /var/log/nginx/access-$fmt_localdate.log main; } } </description>
    </item>
    
    <item>
      <title>Netdata-监控apache</title>
      <link>http://www.hello-api.cn/tech/netdata-002/</link>
      <pubDate>Fri, 12 Aug 2022 12:23:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/netdata-002/</guid>
      <description>安装好apache 确保监控模块开启 /etc/httpd/conf.modules.d/00-base.conf 查看这个文件，确保监控模块开启 LoadModule status_module modules/mod_status.so 没有被注释 一旦启用了mod_status ，接下来需要为Apache服务器状态页面创建一个server-status.conf配置文件 # vim /etc/httpd/conf.d/server-status.conf &amp;lt;Location &amp;#34;/server-status&amp;#34;&amp;gt; SetHandler server-status #Require host localhost #uncomment to only allow requests from localhost &amp;lt;/Location&amp;gt; 通过使用命令行Web浏览器 （如lynx）验证Apache服务器状态和统计信息页是否正常工作，如图所示。 yum install lynx
lynx http://localhost/server-status
5.创建netdata读取apache属性的配置文件
vi /etc/netdata/python.d/apache.conf
# # if the URL is password protected, the following are supported: # # user:&amp;#39;username&amp;#39; # pass:&amp;#39;password&amp;#39; # ------------------------------------------------------------------- # AUTO-DETECTION JOBS # only one of them will run (they have the same name) localhost: name : &amp;#39;local&amp;#39; url : &amp;#39;http://localhost/server-status?</description>
    </item>
    
    <item>
      <title>Netdata-监控redis</title>
      <link>http://www.hello-api.cn/tech/netdata-001/</link>
      <pubDate>Fri, 12 Aug 2022 12:17:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/netdata-001/</guid>
      <description>###1. 如何用netdata监控redis,官网教程
cd /etc/netdata # Replace this path with your Netdata config directory sudo ./edit-config go.d/redis.conf # by tcp socket redis://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt; # by unix socket unix://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;/path/to/redis.sock 例如
socket1: name : &amp;#39;local&amp;#39; socket : &amp;#39;/tmp/redis.sock&amp;#39; pass : &amp;#39;pass&amp;#39; socket2: name : &amp;#39;local&amp;#39; socket : &amp;#39;/var/run/redis/redis.sock&amp;#39; # pass : &amp;#39;&amp;#39; socket3: name : &amp;#39;local&amp;#39; socket : &amp;#39;/var/lib/redis/redis.sock&amp;#39; # pass : &amp;#39;&amp;#39; localhost: name : &amp;#39;local&amp;#39; host : &amp;#39;localhost&amp;#39; port : 6379 pass : &amp;#39;pass&amp;#39; localipv4: name : &amp;#39;local&amp;#39; host : &amp;#39;127.</description>
    </item>
    
    <item>
      <title>初识SSL证书</title>
      <link>http://www.hello-api.cn/tech/ssl-001/</link>
      <pubDate>Fri, 12 Aug 2022 12:15:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/ssl-001/</guid>
      <description>SSL证书也就是支持https访问,其中具体的用处就不在此展开说了,主要介绍下个人使用中可以免费获取的证书渠道以及如何部署
申请SSL证书,对于个人的需要列出几种免费获取证书的方式
阿里云，腾讯云，七牛云
注意：阿里云证书的领取限制是一个自然年内可以领取一次数量为20的云盾单域名试用证书 部署证书
nginx流程 server { ssl_certificate fullchain.pem; ssl_certificate_key privkey.pem; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; } apache流程
&amp;lt;VirtualHost *:443&amp;gt; DocumentRoot &amp;#34;project_path&amp;#34; ServerName domain.com:443 ErrorLog error_log_ssl SSLEngine on SSLProtocol ALL -SSLv2 -SSLv3 #SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5:!RC4 SSLCertificateFile /etc/httpd/conf.d/tls/crt SSLCertificateKeyFile /etc/httpd/conf.d/tls/key SSLCertificateChainFile /etc/httpd/conf.d/tls/ca-bundle SSLVerifyClient none &amp;lt;Files ~ &amp;#34;\.(cgi|shtml|net|php?)$&amp;#34;&amp;gt; SSLOptions +StdEnvVars &amp;lt;/Files&amp;gt; &amp;lt;Directory &amp;#34;project_path&amp;#34;&amp;gt; Options FollowSymLinks AllowOverride All Require all granted &amp;lt;/Directory&amp;gt; &amp;lt;/VirtualHost&amp;gt; </description>
    </item>
    
    <item>
      <title>Mysql数据库-使用记录</title>
      <link>http://www.hello-api.cn/study/mysql-note/</link>
      <pubDate>Fri, 12 Aug 2022 12:13:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mysql-note/</guid>
      <description>How to show binlog mysqlbinlog --no-defaults --start-datetime=&amp;#34;2021-09-30 00:00:00&amp;#34; --stop-datetime=&amp;#34;2021-09-30 23:00:00&amp;#34; -d database --base64-output=DECODE-ROWS -v /binlog/master-bin.001255 --result-file=/root/binlog/mysqllog001255.sql How to get distance ( lat and lng) lat = X lng = X select * , ROUND(6378.138 * 2 * ASIN(SQRT(POW(SIN(({$lat} * PI() / 180 - lat * PI() / 180) / 2),2) + COS({$lat} * PI() / 180) * COS(lat * PI() / 180) * POW(SIN(({$lng} * PI() / 180 - lng * PI() / 180) / 2),2))), 5)*1000 AS distance from table order by distance asc </description>
    </item>
    
    <item>
      <title>Mysql数据库-日期函数</title>
      <link>http://www.hello-api.cn/study/mysql-001/</link>
      <pubDate>Fri, 12 Aug 2022 11:18:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mysql-001/</guid>
      <description>当前日期
select curdate(); 当月最后一天
select last_day(curdate()); 下个月的上一天,例如今天2022-06-01 ,结果为2022-06-30
select DATE_SUB(DATE_ADD(CURDATE(),INTERVAL 1 MONTH),INTERVAL 1 DAY) 下个月的最后一天
select LAST_DAY(DATE_ADD(CURDATE(),INTERVAL 1 MONTH)); </description>
    </item>
    
    <item>
      <title>Mysql数据库-常见问题</title>
      <link>http://www.hello-api.cn/study/mysql-question/</link>
      <pubDate>Fri, 12 Aug 2022 11:10:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mysql-question/</guid>
      <description>能说下myisam 和 innodb的区别吗
myisam引擎是5.1版本之前的默认引擎，支持全文检索、压缩、空间函数等，但是不支持事务和行级锁，所以一般用于有大量查询少量插入的场景来使用，而且myisam不支持外键，并且索引和数据是分开存储的。
innodb是基于聚簇索引建立的，和myisam相反它支持事务、外键，并且通过MVCC来支持高并发，索引和数据存储在一起。
说下mysql的索引有哪些吧，聚簇和非聚簇索引又是什么？
create table user( id int(11) not null, age int(11) not null, primary key(id), key(age) ); B+树是左小右大的顺序存储结构，节点只包含id索引列，而叶子节点包含索引列和数据，这种数据和索引在一起存储的索引方式叫做聚簇索引，一张表只能有一个聚簇索引。假设没有定义主键，InnoDB会选择一个唯一的非空索引代替，如果没有的话则会隐式定义一个主键作为聚簇索引。
事务的基本特性
原子性指的是一个事务中的操作要么全部成功，要么全部失败。
一致性指的是数据库总是从一个一致性的状态转换到另外一个一致性的状态。比如A转账给B100块钱，假设中间sql执行过程中系统崩溃A也不会损失100块，因为事务没有提交，修改也就不会保存到数据库。
隔离性指的是一个事务的修改在最终提交前，对其他事务是不可见的。
持久性指的是一旦事务提交，所做的修改就会永久保存到数据库中。
主从同步
首先先了解mysql主从同步的原理 master提交完事务后，写入binlog
slave连接到master，获取binlog
master创建dump线程，推送binglog到slave
slave启动一个IO线程读取同步过来的master的binlog，记录到relay log中继日志中
slave再开启一个sql线程读取relay log事件并在slave执行，完成同步
slave记录自己的binglog</description>
    </item>
    
    <item>
      <title>Mongodb数据库-增删查改</title>
      <link>http://www.hello-api.cn/study/mongodb-003/</link>
      <pubDate>Fri, 12 Aug 2022 11:09:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mongodb-003/</guid>
      <description>find MongoDB中查询数据的基本指令,类似mysql中的select
example:
db.movies.find({&amp;#34;year&amp;#34;:1975}) db.movies.find({&amp;#34;year&amp;#34;:1975,&amp;#34;title&amp;#34;:&amp;#34;Kill&amp;#34;}) db.movies.find({$and:[{&amp;#34;title&amp;#34;:&amp;#34;Kill&amp;#34;},{&amp;#34;year&amp;#34;:1989}]}) db.movies.find({$or:[{&amp;#34;title&amp;#34;:&amp;#34;Kill&amp;#34;},{&amp;#34;year&amp;#34;:1989}]}) 子文档查询,如文档内容
{&amp;#34;name&amp;#34;:&amp;#34;apple&amp;#34;,&amp;#34;from&amp;#34;:{country:&amp;#34;China&amp;#34;,province:&amp;#34;Guangdong&amp;#34;}} db.fruit.find({&amp;#34;from.country&amp;#34;:&amp;#34;China&amp;#34;}) 条件语法
&amp;lt;&amp;gt; $ne &amp;gt; $gt &amp;gt;= $gte &amp;lt; $gt &amp;lt;= $lte is null {$exists:false} in {$in:[]} not in {$nin:[]} or $or and $and ##remove 删除文档
update updateOne 表示无论条件匹配多少条,只更新第一条
updateMany 匹配多少就更新多少
$push 增加一个对象到数组底部
$pushAll 增加多个对象到数组底部
$pop 从数组底部删除一个对象
$pull 如果匹配指定的值,从数组中删除对应的对象 $pullAll 如果匹配任意的值,从数据中删除对应的对象
$addToSet 如果不存在则增加一个值到数组
db.fruit.updateOne({name:&amp;#34;apple&amp;#34;},{$set:{from:&amp;#34;China&amp;#34;}}) drop 删除集合 </description>
    </item>
    
    <item>
      <title>Mongodb数据库-复制集</title>
      <link>http://www.hello-api.cn/study/mongodb-002/</link>
      <pubDate>Fri, 12 Aug 2022 11:08:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mongodb-002/</guid>
      <description>本地测试结果如下
|- D:\mongodata\db1
|&amp;mdash;&amp;mdash; mongo.conf
|- D:\mongodata\db2
|&amp;mdash;&amp;mdash; mongo.conf
mongo.conf
storage: dbPath: D:\mongodata\db1 journal: enabled: true systemLog: destination: file logAppend: true path: D:\mongodata\db1\mongod.log net: port: 28017 bindIp: 127.0.0.1 replication: replSetName: rs0 </description>
    </item>
    
    <item>
      <title>Mongodb数据库-初识</title>
      <link>http://www.hello-api.cn/study/mongodb-001/</link>
      <pubDate>Fri, 12 Aug 2022 10:37:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/study/mongodb-001/</guid>
      <description>了解mongodb的基本情况
数据类型 描述 String 字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。 Integer 整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 Boolean 布尔值。用于存储布尔值（真/假） Double 双精度浮点值。用于存储浮点值。 Min/Max keys 将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。 Timestamp 时间戳。记录文档修改或添加的具体时间。 Object 用于内嵌文档 Null 用于创建空值 Symbol 符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言 Date 日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息 Object ID 对象 ID。用于创建文档的 ID。　(每个文档都有) Binary Data 二进制数据。用于存储二进制数据 Code 代码类型。用于在文档中存储 JavaScript 代码 Regular expression 正则表达式 聚合查询 pipeline=[$stage1,$stage2,&amp;hellip;$stageN] aggregate db..aggregate(pipeline,{options})
常见步骤
步骤 作用 SQL等价运算法 $match 过滤 where $project 投影 as $sort 排序 order by $group 分组 group by $skip/$limit 结果限制,分页 offset/limit $lookup 左外连接 left outer join 完整的分片集群 应用全透明,无特殊处理 数据自动均衡 动态扩容,无需下线 提供三种分片方式 性能监控 MongoDB Ops Manager Percona 通用监控平台 程序脚本 db.</description>
    </item>
    
    <item>
      <title>从0到1 记录搭建Hugo个人博客-02 选用模板</title>
      <link>http://www.hello-api.cn/tech/hugo-002/</link>
      <pubDate>Fri, 12 Aug 2022 10:17:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/hugo-002/</guid>
      <description>上文讲述了Hugo的如何搭建,这次讲述作者个人博客用的Hugo选用的模板hugo-PaperMod ，对于像我这种鉴赏能力为0的程序员，这么简单明了的风格瞬间让我沉迷了，因此也简单分享下搭建主题的过程
git pull https://github.com/adityatelange/hugo-PaperMod.git git switch exampleSite 此时目录结构包含有 content
assets
config.yml
复制到你的相应hugo项目下
config.yml的代码调整为:
profileMode: enabled: true 运行hugo后首页展示就和我当前的首页类似,简洁明了,恭喜你主题的搭建就完成了</description>
    </item>
    
    <item>
      <title>从0到1 记录搭建Hugo个人博客-01 搭建环境</title>
      <link>http://www.hello-api.cn/tech/hugo-001/</link>
      <pubDate>Thu, 11 Aug 2022 18:09:00 +0800</pubDate>
      
      <guid>http://www.hello-api.cn/tech/hugo-001/</guid>
      <description>使用HUGO搭建一个自己的博客Blog 对于常在敲代码的程序员来说,有个博客能记录和分享是一个相当有意义的事情， Hugo 是一个高效的网站搭建框架,能用简单的markdown语法编辑生成出富有个性的网页,即使是刚学的小白也能很简单的入门使用
说明：Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，同时也对图片、图表、数学公式提供了支持，可以用来书写电子书、软件文档等，同时也可以非常方便的转换为HTML页面或者是PDF文档。
step 1:安装环境
首先选择适合自己操作系统的环境https://github.com/gohugoio/hugo/releases/tag/v0.101.0 ,如我在window上使用就下载了 hugo_extended_0.101.0_Windows-64bit.zip step 2:创建一个新站点
hugo new site quickstart -f yml step 3:添加主题
根据自己的兴趣或者网站的用途,可以选择合适的博客主题,避免了例如我这种设计能力不足的程序员,只需简单的二次修饰即可上线
https://themes.gohugo.io/ cd quickstart git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke step 4:添加内容
辅助命令 hugo new posts/my-first-post.md 当然也可以自己手工创建在content目录下,如该页面就是在person/_index.md,文件格式如下:
--- title: &amp;#34;个人介绍&amp;#34; date: 2022-06-19T08:47:11+08:00 --- step 4:开始启动 如果在本地测试环境下想随时编辑查看,可使用 hugo server 此时打开http://localhost:1313就可以看到效果了 而需要上线编译的时候则可以简单的
hugo step 5:完成
最后把编译后的文件部署到你的服务器或者其他地方,搭配域名等就大功告成了 </description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://www.hello-api.cn/posts/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/markdown-syntax/</guid>
      <description>Sample article showcasing basic Markdown syntax and formatting for HTML elements.</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>http://www.hello-api.cn/posts/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/rich-content/</guid>
      <description>A brief description of Hugo Shortcodes</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>http://www.hello-api.cn/posts/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/placeholder-text/</guid>
      <description>Lorem Ipsum Dolor Si Amet</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>http://www.hello-api.cn/posts/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/math-typesetting/</guid>
      <description>A brief guide to setup KaTeX</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>http://www.hello-api.cn/posts/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.hello-api.cn/posts/emoji-support/</guid>
      <description>Guide to emoji usage in Hugo</description>
    </item>
    
    
    
  </channel>
</rss>
